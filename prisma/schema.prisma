generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model BATCH_JOB_EXECUTION {
  JOB_EXECUTION_ID            BigInt                       @id
  VERSION                     BigInt?
  JOB_INSTANCE_ID             BigInt
  CREATE_TIME                 DateTime                     @db.DateTime(6)
  START_TIME                  DateTime?                    @db.DateTime(6)
  END_TIME                    DateTime?                    @db.DateTime(6)
  STATUS                      String?                      @db.VarChar(10)
  EXIT_CODE                   String?                      @db.VarChar(2500)
  EXIT_MESSAGE                String?                      @db.VarChar(2500)
  LAST_UPDATED                DateTime?                    @db.DateTime(6)
  BATCH_JOB_INSTANCE          BATCH_JOB_INSTANCE           @relation(fields: [JOB_INSTANCE_ID], references: [JOB_INSTANCE_ID], onDelete: NoAction, onUpdate: NoAction, map: "JOB_INST_EXEC_FK")
  BATCH_JOB_EXECUTION_CONTEXT BATCH_JOB_EXECUTION_CONTEXT?
  BATCH_JOB_EXECUTION_PARAMS  BATCH_JOB_EXECUTION_PARAMS[] @ignore
  BATCH_STEP_EXECUTION        BATCH_STEP_EXECUTION[]

  @@index([JOB_INSTANCE_ID], map: "JOB_INST_EXEC_FK")
}

model BATCH_JOB_EXECUTION_CONTEXT {
  JOB_EXECUTION_ID    BigInt              @id
  SHORT_CONTEXT       String              @db.VarChar(2500)
  SERIALIZED_CONTEXT  String?             @db.Text
  BATCH_JOB_EXECUTION BATCH_JOB_EXECUTION @relation(fields: [JOB_EXECUTION_ID], references: [JOB_EXECUTION_ID], onDelete: NoAction, onUpdate: NoAction, map: "JOB_EXEC_CTX_FK")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model BATCH_JOB_EXECUTION_PARAMS {
  JOB_EXECUTION_ID    BigInt
  PARAMETER_NAME      String              @db.VarChar(100)
  PARAMETER_TYPE      String              @db.VarChar(100)
  PARAMETER_VALUE     String?             @db.VarChar(2500)
  IDENTIFYING         String              @db.Char(1)
  BATCH_JOB_EXECUTION BATCH_JOB_EXECUTION @relation(fields: [JOB_EXECUTION_ID], references: [JOB_EXECUTION_ID], onDelete: NoAction, onUpdate: NoAction, map: "JOB_EXEC_PARAMS_FK")

  @@index([JOB_EXECUTION_ID], map: "JOB_EXEC_PARAMS_FK")
  @@ignore
}

model BATCH_JOB_EXECUTION_SEQ {
  ID         BigInt
  UNIQUE_KEY String @unique(map: "UNIQUE_KEY_UN") @db.Char(1)
}

model BATCH_JOB_INSTANCE {
  JOB_INSTANCE_ID     BigInt                @id
  VERSION             BigInt?
  JOB_NAME            String                @db.VarChar(100)
  JOB_KEY             String                @db.VarChar(32)
  BATCH_JOB_EXECUTION BATCH_JOB_EXECUTION[]

  @@unique([JOB_NAME, JOB_KEY], map: "JOB_INST_UN")
}

model BATCH_JOB_SEQ {
  ID         BigInt
  UNIQUE_KEY String @unique(map: "UNIQUE_KEY_UN") @db.Char(1)
}

model BATCH_STEP_EXECUTION {
  STEP_EXECUTION_ID            BigInt                        @id
  VERSION                      BigInt
  STEP_NAME                    String                        @db.VarChar(100)
  JOB_EXECUTION_ID             BigInt
  CREATE_TIME                  DateTime                      @db.DateTime(6)
  START_TIME                   DateTime?                     @db.DateTime(6)
  END_TIME                     DateTime?                     @db.DateTime(6)
  STATUS                       String?                       @db.VarChar(10)
  COMMIT_COUNT                 BigInt?
  READ_COUNT                   BigInt?
  FILTER_COUNT                 BigInt?
  WRITE_COUNT                  BigInt?
  READ_SKIP_COUNT              BigInt?
  WRITE_SKIP_COUNT             BigInt?
  PROCESS_SKIP_COUNT           BigInt?
  ROLLBACK_COUNT               BigInt?
  EXIT_CODE                    String?                       @db.VarChar(2500)
  EXIT_MESSAGE                 String?                       @db.VarChar(2500)
  LAST_UPDATED                 DateTime?                     @db.DateTime(6)
  BATCH_JOB_EXECUTION          BATCH_JOB_EXECUTION           @relation(fields: [JOB_EXECUTION_ID], references: [JOB_EXECUTION_ID], onDelete: NoAction, onUpdate: NoAction, map: "JOB_EXEC_STEP_FK")
  BATCH_STEP_EXECUTION_CONTEXT BATCH_STEP_EXECUTION_CONTEXT?

  @@index([JOB_EXECUTION_ID], map: "JOB_EXEC_STEP_FK")
}

model BATCH_STEP_EXECUTION_CONTEXT {
  STEP_EXECUTION_ID    BigInt               @id
  SHORT_CONTEXT        String               @db.VarChar(2500)
  SERIALIZED_CONTEXT   String?              @db.Text
  BATCH_STEP_EXECUTION BATCH_STEP_EXECUTION @relation(fields: [STEP_EXECUTION_ID], references: [STEP_EXECUTION_ID], onDelete: NoAction, onUpdate: NoAction, map: "STEP_EXEC_CTX_FK")
}

model BATCH_STEP_EXECUTION_SEQ {
  ID         BigInt
  UNIQUE_KEY String @unique(map: "UNIQUE_KEY_UN") @db.Char(1)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model AtFile {
  file_id     BigInt    @id @default(autoincrement())
  org_file_nm String?   @db.VarChar(100)
  file_nm     String?   @db.VarChar(30)
  reg_dt      DateTime? @db.DateTime(0)

  blog Blog[]

  @@map("at_file")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Blog {
  blog_id          BigInt    @id @default(autoincrement())
  foreign_key_id     BigInt?
  foreign_key_target String?   @db.VarChar(50)
  title            String    @db.VarChar(200)
  description      String?   @db.VarChar(200)
  main_file_id     BigInt @unique
  keywords         String?   @db.Text
  content          String    @db.Text
  views            Int       @default(0)
  reg_dt           DateTime? @db.DateTime(0)
  upd_dt           DateTime? @db.DateTime(0)
  author_nm        String    @db.VarChar(50)
  use_yn           String    @default("Y") @db.Char(1)
  blog_cate_id     BigInt
  blogCate        BlogCate @relation(fields: [blog_cate_id], references: [blog_cate_id], onDelete: NoAction, onUpdate: NoAction)
  mainAtFile          AtFile?  @relation(fields: [main_file_id], references: [file_id])
	@@map("blog")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Category {
  cate_id        BigInt    @id @default(autoincrement())
  cate_nm        String?   @db.VarChar(100)
  crawl_yn       String    @default("N") @db.Char(1)
  err_msg        String?   @db.VarChar(200)
  danawa_cate_id String?   @db.VarChar(30)
  max_price      Int?      @default(0)
  crawl_dt       DateTime? @db.DateTime(0)
  filter_str     String?   @db.VarChar(100)
  blog_yn        String    @default("N") @db.Char(1)
  video_yn       String    @default("N") @db.Char(1)
  item           Item[]
  video          Video[]
	@@map("category")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Item {
  item_id          BigInt    @id @default(autoincrement())
  danawa_item_id   String?   @db.VarChar(30)
  item_nm          String    @db.VarChar(100)
  coupang_yn       String    @default("N") @db.Char(1)
  item_sell_url    String?   @db.Text
  item_coupang_url String?   @db.Text
  detail_json      String?   @db.Text
  detail_file_id   BigInt?
  cate_id          BigInt
  reg_dt           DateTime? @db.DateTime(0)
  item_rank        Int       @default(0)
  item_file_id     BigInt?
  price            Int       @default(0)
  category         Category  @relation(fields: [cate_id], references: [cate_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_category_TO_item")

  @@index([cate_id], map: "FK_category_TO_item")
	@@map("item")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Shorts {
  shorts_id       BigInt    @id @default(autoincrement())
  video_file_id   BigInt?
  video_title     String?   @db.VarChar(200)
  video_desc      String?   @db.Text
  reg_dt          DateTime? @db.DateTime(0)
  youtube_channel String?   @db.VarChar(100)
  upload_yn       String    @default("N") @db.Char(1)
	@@map("shorts")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Video {
  video_id          BigInt    @id @default(autoincrement())
  cate_id           BigInt
  video_title       String?   @db.VarChar(200)
  video_desc        String?   @db.Text
  reg_dt            DateTime? @db.DateTime(0)
  youtube_channel   String?   @db.VarChar(100)
  thumbnail_file_id BigInt?
  video_file_id     BigInt?
  tags              String?   @db.VarChar(300)
  upload_yn         String?   @default("N") @db.Char(1)
  upload_dt         DateTime? @db.DateTime(0)
  category          Category  @relation(fields: [cate_id], references: [cate_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_category_TO_video")

  @@index([cate_id], map: "FK_category_TO_video")
	@@map("video")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model BlogCate {
  blog_cate_id        BigInt   @id @default(autoincrement())
  cate_nm             String   @db.VarChar(50)
  ord                 Int?
  parent_blog_cate_id BigInt?
  reg_dt              DateTime @db.DateTime(0)
  use_yn              String   @default("Y") @db.Char(1)
  blog                Blog[]
	@@map("blog_cate")
}
